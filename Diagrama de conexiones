### Diagrama de Conexiones

#### Antena de Conexión (NRF24L01)
- **V+**  -> 3.3V en el Arduino Uno
- **GND** -> GND en el Arduino Uno
- **CSN** -> Pin 9 en el Arduino Uno
- **CE**  -> Pin 10 en el Arduino Uno
- **MOS** -> Pin 11 en el Arduino Uno (MOSI)
- **SCK** -> Pin 13 en el Arduino Uno
- **IRQ** -> No conectado
- **MISC** -> No conectado

#### Joystick
- **GND** -> GND en el Arduino Uno
- **5V**  -> 5V en el Arduino Uno
- **VRX** -> Pin A0 en el Arduino Uno
- **VRY** -> Pin A1 en el Arduino Uno
- **SW**  -> Pin 2 en el Arduino Uno

### Visualización del Diagrama

#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>

// Configuración del módulo NRF24L01
RF24 radio(10, 9); // CE, CSN
const byte address[6] = "00001";

// Pines del joystick
const int VRX = A0;
const int VRY = A1;
const int SW = 2;

void setup() {
  Serial.begin(9600);
  
  // Configuración del joystick
  pinMode(VRX, INPUT);
  pinMode(VRY, INPUT);
  pinMode(SW, INPUT_PULLUP);
  
  // Configuración del módulo NRF24L01
  radio.begin();
  radio.openWritingPipe(address);
  radio.setPALevel(RF24_PA_MIN);
  radio.stopListening();
}

void loop() {
  // Leer valores del joystick
  int xValue = analogRead(VRX);
  int yValue = analogRead(VRY);
  int buttonState = digitalRead(SW);
  
  // Invertir el valor de Y
  yValue = 1023 - yValue;
  
  // Enviar datos del joystick
  int data[3] = {xValue, yValue, buttonState};
  radio.write(&data, sizeof(data));
  
  // Imprimir valores para depuración
  Serial.print("X: ");
  Serial.print(xValue);
  Serial.print(" | Y: ");
  Serial.print(yValue);
  Serial.print(" | Button: ");
  Serial.println(buttonState);
  
  delay(100);
}
```

### Código del Receptor (Arduino en el Carro)

```cpp
#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>

// Configuración del módulo NRF24L01
RF24 radio(10, 9); // CE, CSN
const byte address[6] = "00001";

void setup() {
  Serial.begin(9600);
  
  // Configuración del módulo NRF24L01
  radio.begin();
  radio.openReadingPipe(1, address);
  radio.setPALevel(RF24_PA_MIN);
  radio.startListening();
}

void loop() {
  if (radio.available()) {
    int data[3];
    radio.read(&data, sizeof(data));
    
    int xValue = data[0];
    int yValue = data[1];
    int buttonState = data[2];
    
    // Determinar el movimiento del carro
    if (yValue < 400) {
      Serial.println("Retroceder");
      // Código para retroceder el carro
    } else if (yValue > 600) {
      Serial.println("Avanzar");
      // Código para avanzar el carro
    } else if (xValue < 400) {
      Serial.println("Izquierda");
      // Código para girar a la izquierda
    } else if (xValue > 600) {
      Serial.println("Derecha");
      // Código para girar a la derecha
    } else {
      Serial.println("Parar");
